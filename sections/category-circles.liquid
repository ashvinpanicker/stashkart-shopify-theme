{% schema %}
{
  "name": "Category Circles",
  "settings": [
    {
      "type": "text",
      "id": "section_title",
      "label": "Section Title",
      "default": "Shop by Category"
    }
  ],
  "blocks": [
    {
      "type": "category",
      "name": "Category",
      "settings": [
        {
          "type": "image_picker",
          "id": "image",
          "label": "Category Image"
        },
        {
          "type": "text",
          "id": "title",
          "label": "Category Title"
        },
        {
          "type": "url",
          "id": "link",
          "label": "Link to Collection"
        }
      ]
    }
  ],
  "max_blocks": 12,
  "presets": [
    {
      "name": "Category Circles",
      "category": "Custom"
    }
  ]
}
{% endschema %}

{% if section.settings.section_title != blank %}
  <h2 class="category-circles-heading">{{ section.settings.section_title }}</h2>
{% endif %}
<div class="category-circles-wrapper">
  <div class="category-circles">
    {% for block in section.blocks %}
      <a href="{{ block.settings.link }}" class="circle-item">
        {% if block.settings.image %}
          <img
            src="{{ block.settings.image | image_url: width: 200 }}"
            alt="{{ block.settings.title }}"
            width="100"
            height="100"
          >
        {% endif %}
        <span>{{ block.settings.title }}</span>
      </a>
    {% endfor %}
    <a href="javascript:void(0)" class="end-item" aria-label="Scroll to start">
      <svg
        width="20"
        height="20"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="3"
        stroke-linecap="round"
        stroke-linejoin="round"
      >
        <polyline points="15 18 9 12 15 6"></polyline>
      </svg>
    </a>
  </div>
</div>

<style>
  .category-circles-heading {
    text-align: center;
    font-size: 2rem;
    margin: 20px 0 10px 5px;
    font-weight: 600;
  }

  .category-circles-wrapper {
    overflow-x: auto;
    -webkit-overflow-scrolling: touch;
    padding: 10px 0;
    -ms-overflow-style: none;
    scrollbar-width: none;
  }

  .category-circles-wrapper::-webkit-scrollbar {
    display: none;
  }

  .category-circles {
    display: flex;
    flex-wrap: nowrap;
    gap: 24px;
    padding: 10px 20px;
  }

  .circle-item {
    flex: 0 0 auto;
    width: 100px;
    text-align: center;
    text-decoration: none;
    color: inherit;
  }

  .circle-item img {
    width: 100px;
    height: 100px;
    object-fit: cover;
    border-radius: 50%;
    border: 2px solid #ddd;
    transition: transform 0.3s ease;
  }

  .circle-item:hover img {
    transform: scale(1.1);
  }

  .circle-item span {
    display: block;
    margin-top: 8px;
    font-weight: 500;
  }

  a.end-item {
    flex: 0 0 auto;
    width: 30px;
    margin-top: -40px;
    text-align: center;
    color: inherit;
    cursor: pointer;
    user-select: none;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  /* Desktop layout: even spacing, wrapped rows */
  @media screen and (min-width: 768px) {
    .category-circles-wrapper {
      overflow-x: visible;
    }

    .category-circles {
      flex-wrap: wrap;
      justify-content: center;
      gap: 40px 60px; /* vertical and horizontal spacing */
    }

    a.end-item {
      display: none !important;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const wrapper = document.querySelector('.category-circles-wrapper');
    if (!wrapper || window.innerWidth >= 768) return;

    // Spring animation variables
    const nudgeDistance = 42;
    const springDelay = 1769;
    const springDuration = 420;

    // SPRING ANIMATION
    setTimeout(() => {
      let start = null;

      function springScroll(timestamp) {
        if (!start) start = timestamp;
        const elapsed = timestamp - start;

        const progress = elapsed / springDuration;
        const eased = 1 - Math.cos(progress * Math.PI);

        const offset = eased * nudgeDistance;
        wrapper.scrollLeft = offset;

        if (elapsed < springDuration) {
          requestAnimationFrame(springScroll);
        } else {
          // spring back
          start = null;
          requestAnimationFrame((timestamp) => springBack(timestamp, offset));
        }
      }

      function springBack(timestamp, startOffset) {
        if (!start) start = timestamp;
        const elapsed = timestamp - start;
        const progress = elapsed / springDuration;
        const eased = 1 - Math.cos(progress * Math.PI);
        const offset = startOffset - eased * startOffset;
        wrapper.scrollLeft = offset;

        if (elapsed < springDuration) {
          requestAnimationFrame((t) => springBack(t, startOffset));
        }
      }

      requestAnimationFrame(springScroll);
    }, springDelay);

    // SCROLL-TO-START BUTTON FUNCTIONALITY
    const endItem = document.querySelector('a.end-item');
    if (endItem) {
      endItem.addEventListener('click', () => {
        wrapper.scrollTo({ left: 0, behavior: 'smooth' });
      });
    }
  });
</script>
